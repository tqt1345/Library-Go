// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const findAllBooks = `-- name: FindAllBooks :many
SELECT id, title, description FROM books
ORDER BY title
`

func (q *Queries) FindAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, findAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findBookById = `-- name: FindBookById :one
SELECT id, title, description FROM books WHERE id = ?
`

func (q *Queries) FindBookById(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, findBookById, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Description)
	return i, err
}

const findBookByTitle = `-- name: FindBookByTitle :many
SELECT id, title, description FROM books WHERE title LIKE '%' || ? || '%'
`

func (q *Queries) FindBookByTitle(ctx context.Context, dollar_1 sql.NullString) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, findBookByTitle, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
